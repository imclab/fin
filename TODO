TODO

=== P1 ====

Lists
	Local: uses array property. UI can change order
	ItemSets: uses conditions to decide if items fit in or not. Client is responsible for order
	TODO: Associate order with ItemSets
	TODO: Publish ItemSet updates when order updates

Make FakeDatabase use local storage
	Publish item mutations locally right away, and use local item sets to update views
	Add support for locking item properties so that others know it's being edited

On startup, load database from file or run conditions over all items in couchDB

Node throws if I try to match whitespaces in a live set, e.g. var marcusSet = fin.getItemSet({name: 'Marcus Westin' })


=== P2 ====

Property chaining depends alot on recursive calls modifying the property chain, which requires a bunch of dependancyChain.slice(0) copying of the dependancy chain array. Should use loops instead, without modifying the propertyChain

Sanitize property names and values?

Unsubscribe once for each subscribe call - Publisher#unsubscribe is completely unused

=== P3 ====

Create a store for couch that each item uses as to write its values to, and move the saving of item properties from the server into the item

Remove all semi colons

Remove all old commented code, and save whatever should be saved as TODOs or snippets elsewhere

Look over API again - would be nice to have something like fin.applyToElement

Create ListDragNDrop view for drag and drop support to lists
