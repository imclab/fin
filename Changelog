intended v0.3.0
+ fin transactions - item mutations and creations can be done atomically

intended v0.2.15
+ Upgrade to require v0.4.0

v0.2.14
+ Upgrade to require v0.1.12
+ Fix issue with importing the socket.io client file

v0.2.13
+ Seems like npm silently swallows directories named "build" when publishing a package :/ Move build/* to builds/*

v0.2.11
+ Serve the fin client API files even if the HTTP server is passed in to fin.start
+ Built files are put in their own /build directory rather than at the repo root
+ Fixed bug where api/server was referencing a non-existant file

v0.2.10
+ Serve the fin client API files at a path that's clearer about what's being requested 

v0.2.9
+ the fin server now serves the client API js files

v0.2.8
+ Export fin as a commandline executable

v0.2.7
+ Improved README instructions

v0.2.6
+ Manage dependencies with npm
+ The server API is now exposed as the main fin module - var fin = require('fin')
+ Create bundled builds of client-side API files with require('require/compiler')
+ Connect now takes a host and port: fin.connect('localhost', 8080, function() { ... })
+ Fix: a second observation of a list value will now receive the correct cached values (was previously limited to a single value)

v0.2.5
+ Use latest lib/require

v0.2.4
+ no longer required to call create explicitly on new model instances
+ tested with node v0.2.4
+ models are now documented in the README

v0.2.3.1
+ Fix: Calling new M().create(callback); new M().create(); without a callback the second time would cause the first callback to never execute
+ Fix: Don't skip out early in util.each if an item in the array is null

v0.2.3
+ Fix: Development engine storage Sets coerced number member values into strings
+ Item creation now takes a callback: new models.Item({}).create(function(itemID){})

v0.2.2
+ Bug fix: models with circular properties would cause infinite loops at instantiation time (fixed using getters).
+ fin models will no longer work in IE6/7 since they do not support getters :(
+ Implement model property Set functionality, and re-implement set observation/mutation server-side (sets have not been working for a while...)

v0.2.1
+ Small bug fix - resolvePropertyChain was not handling string property chains properly

v0.2.0
+ first version of fin models! Yay ORM
+ Use latest version 0.1.5 of browser-require
+ Changes to client-side api:
	- Change list operation names: "append" and "prepend" are now "push" and "unshift"
	- API methods can now take arrays as property names in addition to dotted string, e.g. "user.name" == ['user','name']
	- The local and global IDs are now 0 and -1 respectively, rather than "GLOBAL" and "LOCAL".
	- Added a bunch of runtime checks to assure that IDs are always numeric

v0.1.1
+ Use latest version 0.1.3 of browser-require
+ Allow for chaining "on" of the server-side fin API - fin.on(...).on(...)

v0.1.0
+ First versioned version of fin
+ There are two APIs: api/client.js and api/server.js
+ Engines are completely decoupled and split between pubsub and storage
+ Redis and development (node in-memory) engines exist for pubsub and storage

TODO
- Properly parse the commandline arguments e.g. --host=localhost --port=8090 --engine=redis
- move the chaining of observations to the server
- typecheck arguments passed in to model mutation functions (e.g. number.set('foo') should fail)
- upgrade to latest socket.io
- bake observeList and observeSet together, and (maybe) bake them together with observe as well
- implement List unshift, pop, shift
- add Set, implement add, remove, has
- use model schema server-side as well, to validate item creations and mutations
- on connect, send a sha1 sum of the schema to the server, to ensure they use the same one
- check that instanceProperties fullfill "type" & "required" in modelProperties
- check that each instance property is present in modelProperties when created
- engines
	- couchdb storage engine
	- mysql storage engine?
	- 0mq pubsub engine
	- redis engine needs transaction support. Switch from redis-node-client to redis-node?
- upgrade to latest socket.io
- think about how we can add search...
- The order of actions in a transaction is undefined (the first action can come in last, if it is waiting for an ID). This is bad
